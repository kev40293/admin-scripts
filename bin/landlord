#!/usr/bin/perl

use strict;
use warnings;

use Landlord::Utils;
#use Landlord::User;
use Landlord::SQL_Backend;
use feature "say";
#use Test::More;
if ($ARGV[0]){
   if ($ARGV[0] eq "init" ){
      my $ll = Landlord::SQL_Backend->new();
      $ll->initialize();
   }
   elsif ($ARGV[0] eq "refresh") {
      my $ll = Landlord::SQL_Backend->new();
      $ll->refresh_database_info;
   }
}

# Option specifications
my %options_description = ("email" => qr/[\w\.]+@(?:[\w+]\.?){2,}/,
                           "name" => qr/\w+|(?:".*")/);

my @regoplist;
while ( my ($op, $re) = each %options_description){
   push @regoplist , qr/($op=$re)/;
}
my $_ = join "|", @regoplist;
my $options = qr/$_/;

# Language regexes
my $add_user_command = qr/\Alease for (\w+)(?:\swith\s(?:$options\s*)+)?\Z/;
my $delete_user_command = qr/\Aevict (\w+)\Z/;
my $lock_user_command = qr/\Asuspend (\w+)\Z/;
my $delete_group_command = qr/\Adisband (\w+)\Z/;
my $make_group_command = qr/\Agroup (\w+)\Z/;
my $add_to_group_command = qr/\Aput (\w+) in (\w+)\Z/;
my $remove_from_group_command = qr/\Akick (\w+) from (\w+)\Z/;

exit;
use feature qw(switch);
while (<>){
   chomp;
   given($_) {
      when (/$add_user_command/) { say "adding $1 with $2" ; say $2 if $2;}
      default { say "Invalid command"; }
   }
}
exit;

